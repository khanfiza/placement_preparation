/*solution 1 with time:o(n) and space o(n)
class Solution {
    public boolean isPalindrome(ListNode head) {
     
     if(head==null||head.next==null) return true;
     List<Integer> l=new ArrayList<>();
     while(head!=null)
     {
         l.add(head.val);
         head=head.next;
     }
        int start=0,end=l.size()-1;
        while(end>start)
        {
          if(l.get(start)!=l.get(end)) return false;
          end--;
          start++;
        }
        return true;

    }
}
/*Solution2 time:O(n) space:O(1)
class Solution {
    public boolean isPalindrome(ListNode head) {
     
     ListNode slow=head;
     ListNode fast=head;

     while(fast!=null && fast.next!=null)
     {
         slow=slow.next;
         fast=fast.next.next;
     }
     if(fast!=null)slow=slow.next;
    fast=head;
        ListNode next=null;
        ListNode previous=null;
        
        while(slow!=null)
        {
          next=slow.next;
          slow.next=previous;  
           previous=slow;
           slow=next;
        }

 
    while(fast!=null && previous!=null)
    {
        if(fast.val!=previous.val)
         return false;
         fast=fast.next;
         previous=previous.next; 
    }
     return true;
    }
}
